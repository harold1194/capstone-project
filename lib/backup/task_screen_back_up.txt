// ignore_for_file: prefer_interpolation_to_compose_strings

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:student_handbook/constant.dart';
import 'package:student_handbook/data/firestore_crud.dart';
// import 'package:student_handbook/models/task.dart';

import 'package:student_handbook/resources/add_event.dart';
// import 'package:student_handbook/resources/edit_event.dart';
import 'package:student_handbook/widgets/custom_appbar.dart';

class TaskScreen extends StatefulWidget {
  const TaskScreen({Key? key}) : super(key: key);

  @override
  State<TaskScreen> createState() => _TaskScreenState();
}

class _TaskScreenState extends State<TaskScreen> {
  String? uid;

  final Stream<QuerySnapshot> collectionReference = FirebaseCrud.readTask();

  @override
  void initState() {
    getuid();
    super.initState();
  }

  Future<void> getuid() async {
    FirebaseAuth auth = FirebaseAuth.instance;
    final User? user = auth.currentUser;
    setState(() {
      uid = user!.uid;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: const MyAppBar(backGroundColor: kPrimaryColor, title: 'Task'),
      body: StreamBuilder(
        stream: collectionReference,
        builder: (BuildContext context, AsyncSnapshot<QuerySnapshot> snapshot) {
          if (snapshot.hasError) {
            _nodatawidget();
          }
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(
              child: CircularProgressIndicator(),
            );
          }
          if (snapshot.hasData) {
            return Padding(
              padding: const EdgeInsets.only(top: 8.0),
              child: ListView(
                children: snapshot.data!.docs.map((e) {
                  return Card(
                      child: Column(children: [
                    ListTile(
                      title: Text(e["title"]),
                      subtitle: Container(
                        child: (Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: <Widget>[
                            Text("Note: " + e['note'],
                                style: const TextStyle(fontSize: 14)),
                            Text("Date: " + e['date'],
                                style: const TextStyle(fontSize: 12)),
                          ],
                        )),
                      ),
                    ),
                    ButtonBar(
                      alignment: MainAxisAlignment.spaceBetween,
                      children: <Widget>[
                        TextButton(
                          style: TextButton.styleFrom(
                            padding: const EdgeInsets.all(5.0),
                            primary: const Color.fromARGB(255, 143, 133, 226),
                            textStyle: const TextStyle(fontSize: 20),
                          ),
                          child: const Text('Edit'),
                          onPressed: () {
                            // Navigator.pushAndRemoveUntil<dynamic>(
                            //   context,
                            //   MaterialPageRoute<dynamic>(
                            //     builder: (BuildContext context) => EditEvents(
                            //         task: Task(
                            //           uid: e.id,
                            //           title: e["title"],
                            //           note: e["note"],
                            //           startTime: e["startTime"],
                            //           endTime: e["endTime"],
                            //           reminder: e["reminder"],
                            //           colorIndex: e["colorIndex"],
                            //           date: e["currentdate"],
                            //         ),
                            //         ),
                            //   ),
                            //   (route) =>
                            //       false, //if you want to disable back feature set to false
                            // );
                          },
                        ),
                        TextButton(
                          style: TextButton.styleFrom(
                            padding: const EdgeInsets.all(5.0),
                            primary: const Color.fromARGB(255, 143, 133, 226),
                            textStyle: const TextStyle(fontSize: 20),
                          ),
                          child: const Text('Delete'),
                          onPressed: () async {
                            var response =
                                await FirebaseCrud.deleteTask(docId: e.id);
                            if (response.code != 200) {
                              showDialog(
                                  context: context,
                                  builder: (context) {
                                    return AlertDialog(
                                      content:
                                          Text(response.message.toString()),
                                    );
                                  });
                            }
                          },
                        ),
                      ],
                    ),
                  ]));
                }).toList(),
              ),
            );
          } else {
            _nodatawidget();
          }

          return Container();
        },
      ),
      floatingActionButton: FloatingActionButton(
        backgroundColor: Colors.green.shade900,
        onPressed: () {
          Navigator.push(context,
              MaterialPageRoute(builder: (context) => const AddEvents()));
        },
        child: const Icon(
          Icons.add,
          color: Colors.white,
        ),
      ),
    );
  }

  Widget _nodatawidget() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Image.asset(
            'assets/icons/clipboard.png',
            height: 299,
          ),
          SizedBox(height: 3),
          Text(
            'There is no task',
            style:
                Theme.of(context).textTheme.headline1!.copyWith(fontSize: 45),
          ),
        ],
      ),
    );
  }
}
